#!/usr/bin/env perl

use strict;
use warnings;

use List::Util qw/sum/;

my @m = map { chomp; [ split //, $_ ] } <>;

my $max_y = $#m;
my $max_x = $#{$m[0]};

my $m = join("\n", map { my $y = $_; join('', map { $m[$y][$_] } (0..$max_x)) } (0..$max_y));
my $pm = '';

while ($m ne $pm) {
    for my $y (1..$max_y) {
        for my $x (grep { $m[$y][$_] eq 'O' } (0..$max_x)) {
            if ($m[$y-1][$x] eq '.') {
                $m[$y-1][$x] = 'O';
                $m[$y][$x] = '.';
            }
        }
    }

    $pm = $m;
    $m = join("\n", map { my $y = $_; join('', map { $m[$y][$_] } (0..$max_x)) } (0..$max_y));
}

# uncomment this to find the cycles (60 iterations for test data, 300 iterations for actual input)
#my %loads;
#for my $i (1..60) {
#    cycle(\@m);
#    my $load = load(\@m);
#    $loads{$load} //= [];
#    push @{$loads{$load}}, $i;
#}
#
#for my $load (sort { $b <=> $a } keys %loads) {
#    warn "$load: " . join ',', @{$loads{$load}};
#}

# test data
# 69: 2,3,4,10,11,17,18,24,25,31,32,38,39,45,46,52,53,59,60
# 68: 9,16,23,30,37,44,51,58
# 65: 5,7,12,14,19,21,26,28,33,35,40,42,47,49,54,56
# 64: 6,13,20,27,34,41,48,55
# 63: 8,15,22,29,36,43,50,57

#my %eq = (
#    63 => (1000000000 - 8) / 7, # 7*x+8
#    64 => (1000000000 - 6) / 7, # 7*x+6
#    65 => (1000000000 - 5) / 3.5, # even: 3.5*x+5
#    68 => (1000000000 - 9) / 7, # 7*x+9
#    69 => (1000000000 - 4) / 3.5 # even: 3.5*x+4
#); 

# input data
# 104961: 127,149,171,193,215,237,259,281
# 104958: 125,126,147,148,169,170,191,192,213,214,235,236,257,258,279,280
# 104945: 128,150,172,194,216,238,260,282
# 104931: 124,146,168,190,212,234,256,278,300
# 104913: 129,151,173,195,217,239,261,283
# 104903: 123,145,167,189,211,233,255,277,299
# 104897: 130,152,174,196,218,240,262,284
# 104883: 122,144,166,188,210,232,254,276,298
# 104844: 131,153,175,197,219,241,263,285
# 104842: 143,165,187,209,231,253,275,297
# 104815: 142,164,186,208,230,252,274,296
# 104805: 132,154,176,198,220,242,264,286
# 104788: 141,163,185,207,229,251,273,295
# 104758: 133,140,155,162,177,184,199,206,221,228,243,250,265,272,287,294
# 104742: 139,161,183,205,227,249,271,293
# 104733: 134,156,178,200,222,244,266,288
# 104715: 135,157,179,201,223,245,267,289
# 104707: 138,160,182,204,226,248,270,292
# 104698: 136,158,180,202,224,246,268,290
# 104692: 137,159,181,203,225,247,269,291

my %eq = (
    104961 => (1000000000 - 127) / 22, # 22*x+127
    104958 => (1000000000 - 125) / 11, # even: 11*x+125
    104945 => (1000000000 - 128) / 22, # 22*x+128
    104931 => (1000000000 - 124) / 22, # 22*x+124
    104913 => (1000000000 - 129) / 22, # 22*x+129
    104903 => (1000000000 - 123) / 22, # 22*x+123
    104897 => (1000000000 - 130) / 22, # 22*x+130
    104883 => (1000000000 - 122) / 22, # 22*x+122
    104844 => (1000000000 - 131) / 22, # 22*x+131
    104842 => (1000000000 - 143) / 22, # 22*x+143
    104815 => (1000000000 - 142) / 22, # 22*x+142
    104805 => (1000000000 - 132) / 22, # 22*x+132
    104788 => (1000000000 - 141) / 22, # 22*x+141
    104758 => (1000000000 - 133) / 11, # even: 11*x+133
    104742 => (1000000000 - 139) / 22, # 22*x+139
    104733 => (1000000000 - 134) / 22, # 22*x+134
    104715 => (1000000000 - 135) / 22, # 22*x+135
    104707 => (1000000000 - 138) / 22, # 22*x+138
    104698 => (1000000000 - 136) / 22, # 22*x+136
    104692 => (1000000000 - 137) / 22, # 22*x+137
);

for my $k (keys %eq) {
    if ($eq{$k} == int($eq{$k})) {
        print $k . "\n";
        last;
    }
}

sub cycle {
    my $m = shift;

    my $cur = join("\n", map { my $y = $_; join('', map { $m->[$y][$_] } (0..$max_x)) } (0..$max_y));
    my $prev = '';

    # North
    while ($cur ne $prev) {
        for my $y (1..$max_y) {
            for my $x (grep { $m[$y][$_] eq 'O' } (0..$max_x)) {
                if ($m[$y-1][$x] eq '.') {
                    $m[$y-1][$x] = 'O';
                    $m[$y][$x] = '.';
                }
            }
        }

        $prev = $cur;
        $cur = join("\n", map { my $y = $_; join('', map { $m[$y][$_] } (0..$max_x)) } (0..$max_y));
    }

    $prev = '';
    
    # West
    while ($cur ne $prev) {
        for my $x (1..$max_x) {
            for my $y (grep { $m[$_][$x] eq 'O' } (0..$max_y)) {
                if ($m[$y][$x-1] eq '.') {
                    $m[$y][$x-1] = 'O';
                    $m[$y][$x] = '.';
                }
            }
        }

        $prev = $cur;
        $cur = join("\n", map { my $y = $_; join('', map { $m[$y][$_] } (0..$max_x)) } (0..$max_y));
    }

    $prev = '';

    # South
    while ($cur ne $prev) {
        for my $y (reverse 0..$max_y-1) {
            for my $x (grep { $m[$y][$_] eq 'O' } (0..$max_x)) {
                if ($m[$y+1][$x] eq '.') {
                    $m[$y+1][$x] = 'O';
                    $m[$y][$x] = '.';
                }
            }
        }

        $prev = $cur;
        $cur = join("\n", map { my $y = $_; join('', map { $m[$y][$_] } (0..$max_x)) } (0..$max_y));
    }
    
    $prev = '';

    # East
    while ($cur ne $prev) {
        for my $x (reverse 0..$max_x-1) {
            for my $y (grep { $m[$_][$x] eq 'O' } (0..$max_y)) {
                if ($m[$y][$x+1] eq '.') {
                    $m[$y][$x+1] = 'O';
                    $m[$y][$x] = '.';
                }
            }
        }

        $prev = $cur;
        $cur = join("\n", map { my $y = $_; join('', map { $m[$y][$_] } (0..$max_x)) } (0..$max_y));
    }
}

sub load {
    my $m = shift;

    return sum(
        map { 
            my $y = $_;
            my @o = grep { $m[$y][$_] eq 'O' } (0..$max_x);
            ($max_y - $y + 1) * @o
        } (0..$max_y)
    );
}
